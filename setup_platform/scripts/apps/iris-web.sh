#!/bin/bash
# Reference: https://github.com/dfir-iris/iris-web/tree/master

# Exit immediately if a command exits with a non-zero status
set -e

source "./libs/main.sh"
define_env
define_paths
source "./libs/install-helper.sh"

# App specific variables
IRIS_GIT_COMMIT=${IRIS_GIT_COMMIT:-"v2.4.10"}

# Step 0: Clone only the specific commit
printf "Cloning the repository and checking out commit %s...\n" "$IRIS_GIT_COMMIT"
if [ -d "${workdir}/iris-web" ]; then
  print_red "The directory ${workdir}/iris-web already exists. Please remove it before running the script."
  print_red "You can run the following command to remove the directory:"
  print_yellow "./cleanup.sh --app iris-web"
  exit 1
fi

git clone --branch "$IRIS_GIT_COMMIT" --single-branch --depth 1 \
  https://github.com/dfir-iris/iris-web.git "${workdir}"/iris-web

# Step 1: Pre-installation
pre_install "iris-web" false

# Step 2: Copy necessary files from the specified directory
printf "Copying docker-compose.yml and environment.sh from %s...\n" "${src_dir}"
cp "$src_dir"/*start_with_secrets.sh .
cp "$src_dir/docker-compose.yml" .
cp "$src_dir/environment.sh" .
chmod a+rx,go-w *start_with_secrets.sh

# Replaces direct `cp` for the situation of no secrets exists
find "$src_dir" -name 'env.*.secret' -type f | xargs -I % cp % .

# Replace direct `cp` for the cases with no testcases defined
find "$src_dir" -name '*_testcase.sh' -type f | xargs -I % cp % .

# Step 3: Generate passwords if required
if [[ -z "$GENERATE_ALL_PASSWORDS" ]]; then
  read -p "Would you like to generate passwords? [Y/n] (default:no)" ANSWER
  GENERATE_ALL_PASSWORDS=${ANSWER:-n}
fi

if [[ $GENERATE_ALL_PASSWORDS =~ ^[Yy]$ || $GENERATE_ALL_PASSWORDS =~ ^[Yy][Ee][Ss]$ ]]; then
  source "${curr_dir}/libs/passwords.sh"
  generate_passwords_if_required .

  # Show login credentials
  echo "############################################"
  echo "Iris credentials:"
  echo "Username: administrator"
  echo "Password: $(cat env.IRIS_ADM_PASSWORD.secret)"
  echo "############################################"
  echo "### Autogenerated by IRIS scripts ###" >> "$workdir/.env"
  echo "IRIS_ADM_USERNAME=administrator" >> "$workdir/.env"
  echo "IRIS_ADM_PASSWORD=$(cat env.IRIS_ADM_PASSWORD.secret)" >> "$workdir/.env"
fi

# Step 4: Build and bring up the services
printf "Building and bringing up the services...\n"
docker compose build
docker compose up -d --force-recreate

# Step 5: Enable VT module if the IRIS_VT_MODULE_ENABLED is true
if [[ "$IRIS_VT_MODULE_ENABLED" == "true" || $IRIS_MISP_MODULE_ENABLED == "true" ]]; then
  timeout=10
  printf "Enabling Iris modules\nWaiting %s s for the services to start...\n" "$timeout"
  sleep $timeout
  # Waiting until the app services are up and running "IRIS IS READY"
  while [[ $(docker compose logs app | grep -c "IRIS IS READY") -eq 0 ]]; do
    printf "Sleeping 5; Still waiting for the services to start...\n"
    sleep 5
  done

  if [[ "$IRIS_VT_MODULE_ENABLED" == "true" ]]; then
    printf "\n####\nEnabling VT module...\n####\n"
    source "$src_dir/enable_vt_module.sh"
  fi

  if [[ "$IRIS_MISP_MODULE_ENABLED" == "true" ]]; then
    printf "\n####\nEnabling MISP module...\n####\n"
    cp "$src_dir/$IRIS_MISP_MODULE_CONFIG_FILE" .
    source "$src_dir/enable_misp_module.sh"
  fi
fi

print_green_v2 "$service_name deployment started." "Successfully"
